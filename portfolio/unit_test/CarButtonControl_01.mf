;========================================================================
; Unit Test for CarButtonControl (1)
;========================================================================
;18649 Fall 2012
;Group17
;Collin Buchan (cbuchan) - Author
;Rajeev Sharma (rdsharma)
;Jesse Salazar (jessesal) - Author
;Jessica Tiu   (jtiu)
;
;Last modified 2012-10-11 (cbuchan)
;========================================================================

; Unit test for CarButtonControl

; Note: Assertions must be inserted more than two periods after a message
;       or physical value has been inserted to be sure that the change 
;       propagates through the system.

; Note: This test file demonstrates network/framework message injections
;       and network/framework/controller state assertions.

#INCLUDE defines.mf ;include CAN id and period definitions

;========================================================================
;initialize
;========================================================================
0s  I  AT_FLOOR_PERIOD N AT_FLOOR_[4][FRONT]_CAN_ID AtFloor 4 FRONT = false
0s  I  CAR_BUTTON_CONTROL_PERIOD F CarCall 4 FRONT = false
0s  I  DOOR_CLOSED_SENSOR_PERIOD N DOOR_CLOSED_SENSOR_[FRONT][LEFT]_CAN_ID DoorClosed FRONT LEFT = true

; check that the CarLight is off initially, and that initial state values are correct
;#state 'LIGHT_OFF'
;check that the light is off and that the proper values are set
+1.0s  A S CarButtonControl[4][FRONT] : STATE == STATE_LIGHT_OFF
+0s    A F CarLight 4 FRONT : lighted == false
+0s    A N CAR_CALL_[4][FRONT]_CAN_ID TinyBoolean : getValue == false
+0s    A N CAR_LIGHT_[4][FRONT]_CAN_ID TinyBoolean : getValue == false

;========================================================================
;test
;========================================================================
;#transition 'T9.1'
;passenger presses and releases button
+0.21s  I  CAR_BUTTON_CONTROL_PERIOD F CarCall 4 FRONT = true
+0.21s  I  CAR_BUTTON_CONTROL_PERIOD F CarCall 4 FRONT = false

;#state 'LIGHT_ON'
;check that the light is on and that the proper values are set
+1.0s  A S CarButtonControl[4][FRONT] : STATE == STATE_LIGHT_ON
+0s    A F CarLight 4 FRONT : lighted == true
+0s    A N CAR_CALL_[4][FRONT]_CAN_ID TinyBoolean : getValue == true
+0s    A N CAR_LIGHT_[4][FRONT]_CAN_ID TinyBoolean : getValue == true

;#transition 'T9.2'
+1.0s  I AT_FLOOR_PERIOD N AT_FLOOR_[4][FRONT]_CAN_ID AtFloor 4 FRONT = true
+0s    I DISPATCHER_PERIOD N DESIRED_FLOOR_CAN_ID DesiredFloor = 4 FRONT STOP

;#state 'LIGHT_OFF'
;check that the light is off and that the proper values are set
+1.0s  A S CarButtonControl[4][FRONT] : STATE == STATE_LIGHT_OFF
+0s    A F CarLight 4 FRONT : lighted == false
+0s    A N CAR_CALL_[4][FRONT]_CAN_ID TinyBoolean : getValue == false
+0s    A N CAR_LIGHT_[4][FRONT]_CAN_ID TinyBoolean : getValue == false

;#transition 'T9.1'
;dispatcher computes new floor...
+0s    I DISPATCHER_PERIOD N DESIRED_FLOOR_CAN_ID DesiredFloor = 5 FRONT STOP

;passenger presses and releases button
+0.21s  I  CAR_BUTTON_CONTROL_PERIOD F CarCall 4 FRONT = true
+0.21s  I  CAR_BUTTON_CONTROL_PERIOD F CarCall 4 FRONT = false

;#state 'LIGHT_ON'
;check that the light is on and that the proper values are set
+1.0s  A S CarButtonControl[4][FRONT] : STATE == STATE_LIGHT_ON
+0s    A F CarLight 4 FRONT : lighted == true
+0s    A N CAR_CALL_[4][FRONT]_CAN_ID TinyBoolean : getValue == true
+0s    A N CAR_LIGHT_[4][FRONT]_CAN_ID TinyBoolean : getValue == true

;#transition 'T9.2'
;check that mDesiredFloor.b = BOTH will also turn light off
+1.0s  I AT_FLOOR_PERIOD N AT_FLOOR_[4][FRONT]_CAN_ID AtFloor 4 FRONT = true
+0s    I DISPATCHER_PERIOD N DESIRED_FLOOR_CAN_ID DesiredFloor = 4 BOTH STOP

;#state 'LIGHT_OFF'
;check that the light is off and that the proper values are set
+1.0s  A S CarButtonControl[4][FRONT] : STATE == STATE_LIGHT_OFF
+0s    A F CarLight 4 FRONT : lighted == false
+0s    A N CAR_CALL_[4][FRONT]_CAN_ID TinyBoolean : getValue == false
+0s    A N CAR_LIGHT_[4][FRONT]_CAN_ID TinyBoolean : getValue == false
