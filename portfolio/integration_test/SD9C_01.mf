;========================================================================
; Integration Test for SD9C
;========================================================================
;18649 Fall 2012
;Group17
;Collin Buchan (cbuchan)
;Rajeev Sharma (rdsharma)
;Jesse Salazar (jessesal)
;Jessica Tiu   (jtiu) - Author
;
;Last modified 2012-10-11 (cbuchan)
;========================================================================

#INCLUDE defines.mf ;include CAN id and period definitions

;========================================================================
;initialize
;========================================================================
;Elevator approaching floor f=7, with doors closed.
+0.25s  A S Dispatcher : STATE == STATE_RESET
+0s  A N DESIRED_FLOOR_CAN_ID DesiredFloor : getFloor == 1
+0s  A N DESIRED_FLOOR_CAN_ID DesiredFloor : getHallway == NONE
+0s  A N DESIRED_FLOOR_CAN_ID DesiredFloor : getDirection == STOP

; DoorControl in closed state
+0s I  DOOR_CLOSED_SENSOR_PERIOD N DOOR_CLOSED_SENSOR_[BACK][LEFT]_CAN_ID DoorClosed BACK LEFT = true
+0s I  DOOR_CLOSED_SENSOR_PERIOD N DOOR_CLOSED_SENSOR_[BACK][RIGHT]_CAN_ID DoorClosed BACK RIGHT = true
+0s I  DOOR_CLOSED_SENSOR_PERIOD N DOOR_CLOSED_SENSOR_[FRONT][LEFT]_CAN_ID DoorClosed FRONT LEFT = true
+0s I  DOOR_CLOSED_SENSOR_PERIOD N DOOR_CLOSED_SENSOR_[FRONT][RIGHT]_CAN_ID DoorClosed FRONT RIGHT = true

;========================================================================
;1. Elevator arrives at floor f.
;========================================================================
+0s I AT_FLOOR_PERIOD N AT_FLOOR_[1][FRONT]_CAN_ID AtFloor 1 FRONT = true

+0.25s  A S Dispatcher : STATE == STATE_IDLE
+0s     A N DESIRED_FLOOR_CAN_ID DesiredFloor : getFloor == 1
+0s     A N DESIRED_FLOOR_CAN_ID DesiredFloor : getHallway == NONE
+0s     A N DESIRED_FLOOR_CAN_ID DesiredFloor : getDirection == STOP

;hallcall for 7 true, elevator travels up to f=7
+0.25s I DOOR_CONTROL_PERIOD N HALL_CALL_[7][FRONT][UP]_CAN_ID Boolean = true
+0s I DOOR_CONTROL_PERIOD N HALL_CALL_[7][BACK][UP]_CAN_ID Boolean = true

;arc 1. mAtFloor[f,*]=true
+0.25s I AT_FLOOR_PERIOD N AT_FLOOR_[1][FRONT]_CAN_ID AtFloor 1 FRONT = false
+0s I AT_FLOOR_PERIOD N AT_FLOOR_[1][BACK]_CAN_ID AtFloor 1 BACK = false
+0s I AT_FLOOR_PERIOD N AT_FLOOR_[2][BACK]_CAN_ID AtFloor 2 BACK = false
+0s I AT_FLOOR_PERIOD N AT_FLOOR_[3][FRONT]_CAN_ID AtFloor 3 FRONT = false
+0s I AT_FLOOR_PERIOD N AT_FLOOR_[4][FRONT]_CAN_ID AtFloor 4 FRONT = false
+0s I AT_FLOOR_PERIOD N AT_FLOOR_[5][FRONT]_CAN_ID AtFloor 5 FRONT = false
+0s I AT_FLOOR_PERIOD N AT_FLOOR_[6][FRONT]_CAN_ID AtFloor 6 FRONT = false
+0s I AT_FLOOR_PERIOD N AT_FLOOR_[7][FRONT]_CAN_ID AtFloor 7 FRONT = true
+0s I AT_FLOOR_PERIOD N AT_FLOOR_[7][BACK]_CAN_ID AtFloor 7 BACK = true

; => dispatcher TargetHall=Both

; DoorControl in closed state
+0s I  DOOR_CLOSED_SENSOR_PERIOD N DOOR_CLOSED_SENSOR_[BACK][LEFT]_CAN_ID DoorClosed BACK LEFT = true
+0s I  DOOR_CLOSED_SENSOR_PERIOD N DOOR_CLOSED_SENSOR_[BACK][RIGHT]_CAN_ID DoorClosed BACK RIGHT = true
+0s I  DOOR_CLOSED_SENSOR_PERIOD N DOOR_CLOSED_SENSOR_[FRONT][LEFT]_CAN_ID DoorClosed FRONT LEFT = true
+0s I  DOOR_CLOSED_SENSOR_PERIOD N DOOR_CLOSED_SENSOR_[FRONT][RIGHT]_CAN_ID DoorClosed FRONT RIGHT = true

;========================================================================
;2. Dispatcher notifies DoorControl that Both doors should be opened.
;========================================================================
;arc2. assert desired floor.b=both <-- Dispatcher
+0.25s  A S Dispatcher : STATE == STATE_SERVICE_CALL
+0s     A N DESIRED_FLOOR_CAN_ID DesiredFloor : getFloor == 7
+0s     A N DESIRED_FLOOR_CAN_ID DesiredFloor : getHallway == BOTH
+0s     A N DESIRED_FLOOR_CAN_ID DesiredFloor : getDirection == UP

;========================================================================
;3. Both doors open.
;========================================================================
;arc 3. assert DoorMotor[b,*]=open <-- DoorControl
+0.5s A F DoorMotor FRONT RIGHT : command == OPEN
+0s   A F DoorMotor FRONT LEFT : command == OPEN
+0s   A F DoorMotor BACK RIGHT : command == OPEN
+0s   A F DoorMotor BACK LEFT : command == OPEN

;arc 4. mDoorOpened[*,r]=true
+0.25s I DOOR_OPENED_SENSOR_PERIOD N DOOR_OPEN_SENSOR_[FRONT][RIGHT]_CAN_ID DoorOpened FRONT RIGHT = true
+0s   I DOOR_OPENED_SENSOR_PERIOD N DOOR_OPEN_SENSOR_[FRONT][LEFT]_CAN_ID DoorOpened FRONT LEFT = true
+0s   I DOOR_OPENED_SENSOR_PERIOD N DOOR_OPEN_SENSOR_[BACK][RIGHT]_CAN_ID DoorOpened BACK RIGHT = true
+0s   I DOOR_OPENED_SENSOR_PERIOD N DOOR_OPEN_SENSOR_[BACK][LEFT]_CAN_ID DoorOpened BACK LEFT = true

;arc 5. assert DoorMotor[b,*]=stop <-- DoorControl
+0.5s A F DoorMotor FRONT RIGHT : command == STOP
+0s   A F DoorMotor FRONT LEFT : command == STOP
+0s   A F DoorMotor BACK RIGHT : command == STOP
+0s   A F DoorMotor BACK LEFT : command == STOP

;========================================================================
;Post Conditions
;========================================================================
;Both doors are open.
;Elevator is at floor f.

